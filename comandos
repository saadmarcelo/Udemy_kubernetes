kubectl get node ( lista os nodes do cluster)
kubectl get node -owide 
kubectl get pod ( lista os pods do namespace)
kubectl get pod -A ( lista os pods de todos os namespaces)
kubectl get pod -Aowide ( lista mais informações dos pods)
kubectl get pod -v9 ( lista os pods com o modo verbose)
kubectl get pod -n kube-system etcd-master -oyaml (exporta o yaml com o describe do pod etcd-master)

necessario instalar o etcdctl no master
apt install etcdctl-client

entrar na pasta
/etc/kubernetes/pki/etcd/ (local onde estarao as chaves e certificados do cluster)


etcdctl member list --cacert $(pwd)/ca.crt --cert $(pwd)/server.crt --key server.key--write-out table
comando para listar os membros do cluster

scritp etcdctl.env

cat <<EOF > etcdctl.env
export ETCDCTL_CACERT=/etc/kubernetes/pki/etcd/ca.crt
export ETCDCTL_CERT=/etc/kubernetes/pki/etcd/server.crt
export ETCDCTL_KEY=/etc/kubernetes/pki/etcd/server.key
export ETCDCTL_API=3
EOF

backup etcd ( normalmente fica na pasta /var/lib/etcd/)
etcdctl snapshot save backup.db (faz o backup no arquivo backup.db)
etcdctl snapshot restore backup.db (restaura o backup)

#modulo_02 YAML

kubectl apply -f modulo_02/pod.yaml
kubectl api-resources ( lista todos recursos do cluester)

kubectl get pods nginx -o yaml (para gerar o arquivo yaml do pod q ja esta rodando)

install krew

https://krew.sigs.k8s.io/docs/user-guide/quickstart/

kubectl krew install neat (plugin neat para )

kubectl get pods nginx -o yaml | kubectl neat ( cria um arquivo yaml com as informacoes basicas para rodar o pod)

##### modulo 03 ######

kubectl get namespaces ( mostra as namespaces atualmente no cluster)

kubectl get pod --namespace kube-flannel ( lista os pods no namespace kube-flannel)

kubectl create namespace devops (cria o namespace devops)

kubectl delete namespace devops ( deleta o namespace devops)

kubectl create namespace devops --dry-run -oyaml | kubectl neat > /tmp/namespace.yaml( roda o comando de criar o namespace mas gera o arquivo yaml e manda como entrada no pugin do neat para limpar os dados do yaml e salva no arquivo /tmp/namespace.yaml)

##### modulo 04 ########

kubectl run --image alpine --rm -it nomepod sh (cria um container com a imagem do alpine , que sera removido assim q sair do console)

kubectl run --image hashicorp/terraform:latest terraform-demo --dry-run -oyaml (gerando um yaml do pod do terraform)

kubectl run --image hashicorp/terraform:latest terraform-demo --dry-run -oyaml | kubectl neat (gera o yaml sem os conteudos nao desejados)

kubectl exec -it terraform-demo -- sh ( para conectar no pod terraform-demo )

kubectl run --image busybox:1.28 --rm -it busybox-demo sh ( cria um pod com a imgem busybox vem com algumas ferramentas instaladas)

kubectl run --image httpd multicontianer-pod --dry-run -oyaml | kubectl neat > modulo_04/pod-multicontainer.yaml ( cria um yaml para o pod-multconainer )

kubectl apply -f modulo_04/pod-multicontainer.yaml ( criar o pod-multicontainer com 2 containers httpd e debug)

 kubectl logs multicontianer-pod (vai mostrar os logs do container httpd q ele definou como default)

kubectl logs multicontianer-pod -c debug ( para vericar o log do do container debug )

kubectl exec multicontianer-pod -- ls (executa uma comando no pod multicontianer-pod)

kubectl exec multicontianer-pod -c debug -- ls ( executa um comando no pod debug)

######## procedimentos para conectar no pod sem usar o kubectl exec 

kubectl get pods -owide  ( lista os pods e mostra mais informacoes em qual node o container esta rodando)

  # conecta no node onde o container esta rodando 

crictl ps ( lista os container rodando no node)

crictl inspect e7b | jq (inspeciona o json com container e manda para o jq para fica colorido a saida e facilitar a leitura )

crictl inspect e7b 2> /dev/null | jq '.info.pid' ( mesma opcao anterior , jogando as mens de erro no /dev/null e filtrando o campo info.pid)

# com  informacao do pid podemos da o comando ps

ps aux | grep 70941  ( mostra os processo com o pid 70941)

nsenter -t 70941 -n ls / ( usando o comando nsenter para radar um comando no namespace com o pid 70941 )

nsenter -t 70941 -n curl 10.244.2.7 (rodando o comando curl no ip do container para ter a resposta do apache)


##### static pods

cd /etc/kubernetes/manifests/    ( todos manifestos criado nessa pasta serao criados)


#### modulo 05 #############

Kubectl create deployment --image httpd httpd ( cria um deployment do com uma imagem do apache)

kubectl get deploy ( mostra o stado do deployment)

kubectl get deploy httpd -oyaml | kubectl neat ( exporta o deployment para um yaml)

kubectl get replicaset ( mostra os replicasets no cluster)

kubectl edit deploy httpd ( ja edita o arquivo yaml do deployment)

kubectl api-resources | grep -i deploy ( lista os resources com o nome deploy e mostra a versao da api)

kubectl get deploy --show-labels ( mostra as labels dos deploys)

kubectl get pods -l environment=development ( motras os pods com o label environment=development)

kubectl explain deployment ( mostra uma documentacao de criacao de um deployment)

kubectl explain deployment.metadata ( mostra os campos permitidos dentro do metadata)

kubectl rollout history deployment/nginx ( mostra os historicos do deployment/nginx ) 

kubectl rollout status deployment/nginx ( mostra o status do deployment/nginx)

kubectl rollout pause deployment/nginx ( pausa o deployment/nginx)

kubectl rollout resume deployment/nginx (continua a rollout )

kubetl rollout undo deployment/nginx ( volta por padrao para o ultimo replicaset)

kubectl rollout undo deployment/nginx --to-revision 1 ( volta para o 1 replicaset no historico )

kubectl edit deploy httpd (vai editar o yaml do deploy httpd para aumentar a quantidade de replicas { forma errada de se fazer})

kubectl scale deployment nginx --replicas 2 ( aumenta a quantidade de replicas para 2 do deployment nginx)

kubectl top node ( lista a media de utilizacao dos recursos dos nodes)

wget https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml ( para fazendo o download do api metric service )
change file to add             - --kubelet-insecure-tls (spec.template.spec.containers.args)


https://goldilocks.docs.fairwinds.com/#how-can-this-help-with-my-resource-settings    # ferrementa para mensurar o uso de dados dos pods instalar via helm


#### modulo 06 #############
DeamonSets

servico deve rodar em cada um dos nodes

caso de uso:
  - logs
  - CNI (configuracao da interface de rede)
  - pacth 

kubectl get ds -A 

kubectl create deployment --image nginx nginx -oyaml --dry-run | kubectl neat > daemonset.yaml
(para usar co mo modelo de yaml e subsituir do deploymento por DaemonSet e retirar as replicas)

kubectl get node --show-labels ( mostra as labels do node)

########### modulo 06 #############

kubectl get statefulsets -A


########### modulo 07 #############
statefulset:
  - deployment controlado 
  - nomes (previsiveis)
  - volume por pod

para executar o lab precisamos de um local provisioner storage
https://github.com/rancher/local-path-provisioner

para instalar 
kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.29/deploy/local-path-storage.yaml

kubectl get pvc -A ( comando para verificar o pvc de todo o cluster)

kubectl get storageclass -A (mostra o storage class)

na instalacao do local-path-storage ela nao ficou como default ( precisamos editar isso )

kubectl edit sc local-path ( edita o yaml do storage class ) adicionar apos no annotations storageclass.kubernetes.io/is-default-class: "true" 

kubectl get sc (mostra a local-path como default)

kubectl get statefulsets.app

kubectl scale statefulset nginx --replicas 6 


editado o modulo_07/statefulset/statefulset.yaml para solicitacao do pvc na hora da criacao do statefulset vai ser criado um volume persistente para cada pod

kubectl get pdb ( pod Disruption budget configura o minino ou maxino de pods que podem esta off line)


############# modulo 08 #############

jobs

kubectl get job ( lista os job executados)
kubectl get pod ( lista os container para ver o pod com o job criado)
kubectl logs echo-command-zn7vt ( para ver os logs do container executando o job)

problema do job ele é imutavel ( para poder resolver essee problema colocar no final do yaml do pod o parametro ttlSecondsAfterFinished: 0 q vai apagar o pod no momento que termnar a execucao da tarefa)

cronjob mantem os ultimos 3 executados

kubectl get cronjob ( lista os agendamentos do jobs)


############# modulo 09 #############
services

Porque utilizar?
  - pronto unico de entrada
  - Load balancing
  - DNS name (service discovery)

tipos de services
  Cluster IP:
    - O mais utilizado
    - Comunicaçao interna do cluster
    - Não é utlizado para expor a porta para fora do cluster
  NodePort:
    - Acesso externo via nodeport
    - Bom para testes e demos
    - Range 30000 -32767
  Load Balancer:
    - Funciona na cloud
    - Ideal para app TCP ou UDP
    - Custoso ter um LB por aplicação
  External Name:
   - criar um redirecinemndo de dns

kubectl get svc -A ( pega todos os services rodando no cluster)

kubectl get svc kubernetes -oyaml ( mostra o yaml do service kubernetes)
kubectl get svc kubernetes -oyaml kubectl neat ( para jogar no serice q retira os itens desnecessairos do yaml) 


kubectl expose ( expoen o servico temporariamente para testes)
kubectl expose deployment nginx --port 80 --target-port 80 ( expoem o deployment nginx na porta 80, ele cria um service )

caso queria conectar em um service q nao esta no mesmo namespace
host  kube-dns.kube-system.svc.cluster.local ( nome do service. namespace. svc. cluster. local)

kubectl get endpoint ( mostra todos os enpoints dos servicos )

kubectl describe endpoints nginx ( mostra as informacoes do endpoint nginx)

kubectl get configmap -n kube-system ( lista todos os configmaps do namespace kube-system)

kubectl get configmap -n kube-system -o yaml | kubectl neat ( vai estrair dados nao necessarios e mostra o yaml do configmap )

###nodeport###

kubectl edit service nginx ( para editar o config do servico para nodeport)

kubectl get service ( vai mostrar os servicos com nodepor e nas portas vai mostrar qual porta estara exposta a aplicacao 
entao basta colocar o ip do woker:porta de qualquer maquina da rede que tera acesso a aplicaçao)

é necessario instalar o metallb para poder utilizar o loadbalancer ( ferramenta dinsponivel para entregar ips para o loadbalance)
kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.8/config/manifests/metallb-native.yaml

https://metallb.universe.tf/configuration/

configurar layer 2  coonform o link acima

criar o arquivo manifest.yaml com a faixa de ip quer ira ser disponibilizada pelo mettalb


type externalName serve para fazer links e redirecionamentos  



############# modulo 10  #############

pesquisar no google sobre o ingress nginx , baixar da versao do github a versao do baremetal
wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.11.2/deploy/static/provider/baremetal/deploy.yaml 

editar o kind : Service para o tipo do servico ser LoadBalancer ( como ja temos o metallb ira disponibilizar o ip para o loadbalancer)

kubectl apply -f modulo_10/ingress/deploy.yaml

testar o loadbalancer 
kubectl get svc -n ingress-nginx ( curl no external ip do loadbalancer )

kubectl get ingressclass ( vai listar as ingressclass IMPORTANTE criar uma ingressclass default)

kubect get ingressclass nginx -oyaml ( mostrar o yaml do ingressclass )
kubect edit ingressclass nginx -oyaml ( editar o yaml do ingressclass  para mudar o annotations transformando em default   ingressclass.kubernetes.io/is-default-class: "true")

kubectl get po -n ingress-nginx ( vai lisar o pods do ingress-nginx para saber o nome do pod e poder consultar o log

kubectl logs -n ingress-nginx ingress-nginx-controller-6484d48959-cxzch (Toda vez q for alterada verficar no pod do controller sera feito o reload com as informacoes )



############# modulo 11  #############
Config maps e secrets

kubectl get configmap ( lista os configmaps do cluster)

kubectl create configmap kubectl create configmap my-config --from-literal=key1=config --from-literal=key2=confi
g2 (criando um configmap na namespace default )

kubectl delete configmap my-config

cd modulo_11/configmap_secret
kubectl apply -f configmap.yaml ( cria o configmap)
kubectl apply -f deployment.yaml ( cria o deployment com o apontamento do configmap )
kubectl exec nginx-1-6b84755c46-dlsjc -- env ( lista as variavel de ambiente VIRTUAL_HOST )

